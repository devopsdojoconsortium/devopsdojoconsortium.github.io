<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://dojoconsortium.org/index.html/feed.xml" rel="self" type="application/atom+xml" /><link href="http://dojoconsortium.org/index.html/" rel="alternate" type="text/html" /><updated>2021-03-04T20:15:16+00:00</updated><id>http://dojoconsortium.org/index.html/feed.xml</id><title type="html">Dojo Consortium</title><subtitle>Open sourcing enterprise transformation.</subtitle><entry><title type="html">5 Minute DevOps - Engineering Culture Change with CI</title><link href="http://dojoconsortium.org/index.html/blog/2019-10-12-bfinster.html" rel="alternate" type="text/html" title="5 Minute DevOps - Engineering Culture Change with CI" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://dojoconsortium.org/index.html/blog/bfinster</id><content type="html" xml:base="http://dojoconsortium.org/index.html/blog/2019-10-12-bfinster.html">&lt;p&gt;&lt;img src=&quot;../assets/img/posts/continuous-improvement.png&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, you hired an “Agile Transformation” consulting company to advise executive leadership and you’re “Agile” now. Leadership attended a week-long class on “Agile”, teams took a two day class about Scrum being The Way. The new methodology with story points, daily standup, and sprints now reigns, but outcomes haven’t changed. Next, you talk about the “agile mindset” while Scrum Masters report monthly on how much “velocity” has increased. At the team level, the labels have changed, but the processes are the same. Possibly there is less design, but you don’t design solutions in “Agile”. They just “emerge”, right?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;What went wrong? Marketing and the desire for silver bullets overtook goals and outcomes. You saw a framework that was popular and bought it without understanding the underlying principles. However, frameworks are solutions that worked for someone else in their context, not yours, and no drive-by “transformation” will result in anything except loss revenue, frustration, and low satisfaction from both customers and employees. For real change to happen, it needs to be ingrained into the culture. Culture and mindset change requires behavior change. At the team level, we do this with constructive constraints and rapid feedback.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.”
&lt;small&gt;&lt;a href=&quot;https://agilemanifesto.org/principles.html&quot;&gt;Principles of Agile Development&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s our goal: &lt;strong&gt;the continuous delivery of valuable software is our highest priority&lt;/strong&gt;. That’s the outcome we are after, continuous delivery; CI/CD. We can measure that outcome, apply the correct constraints, and move the culture.
Not Buzzwords&lt;/p&gt;

&lt;p&gt;Continuous integration and continuous delivery have measurable outcomes, they aren’t buzzwords. I often hear people use “CI/CD” when they mean build tool automation and don’t even get me started on “DevOps”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We’ve created a DevOps team to implement CI/CD pipelines and manage the releases. We’re DevOps now!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/posts/facepalm.jpg&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How many of you just cringed?&lt;/p&gt;

&lt;p&gt;Continuous integration is behavior, not Jenkins, CircleCI, Travis, or any other tool. CI is how we apply these tools and CI is the key to transforming teams. However, to be effective, we need to be explicit about CI definitions and how we measure our ability to execute.&lt;/p&gt;

&lt;h2 id=&quot;ubiquitous-language&quot;&gt;Ubiquitous Language&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each developer submits tested, backwards compatible changes that are Integrated to the trunk daily.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition creates constructive constraints and rapidly uncovers cultural, technical, and process challenges. Asking continuously, “why can’t we do this?” drives the improvement conversation. The common challenges are basic but take discipline to solve.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Workflow isn’t managed correctly with too many things in progress, lack of prioritization, and lack of teamwork to drive things to completion.&lt;/li&gt;
  &lt;li&gt;Work hasn’t been refined to the detail required to deliver it.&lt;/li&gt;
  &lt;li&gt;Testing is manual, requires handoffs to a testing team, or just doesn’t exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these impact quality and delivery speed. To fix them, we start with some simple improvements.&lt;/p&gt;

&lt;h2 id=&quot;establish-policies&quot;&gt;Establish Policies&lt;/h2&gt;

&lt;p&gt;Explicit policies are important for keeping everyone aligned. Keep them concise, clear, and always visible. Policies stored on a file share do not exist. Print them and post them.&lt;/p&gt;

&lt;h3 id=&quot;ci-working-agreement&quot;&gt;CI Working Agreement&lt;/h3&gt;

&lt;p&gt;A working agreement focused on CI highlights the real priority, sustainable delivery of decreasing batch size with high quality and rapid development feedback.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fixing a broken build is the team’s highest priority because we cannot fix production with a broken build.&lt;/li&gt;
  &lt;li&gt;The team will not go home while the build is broken because it puts production at risk.&lt;/li&gt;
  &lt;li&gt;We do not blame team members for broken builds. The team is responsible for hardening the build process against breaks so the team broke the build.&lt;/li&gt;
  &lt;li&gt;All branches originate from the trunk and are deleted in less than 24 hours&lt;/li&gt;
  &lt;li&gt;All changes must include all relevant tests and may not break existing tests&lt;/li&gt;
  &lt;li&gt;Changes are not required to be “feature complete”
Helping the team complete work in progress is more important than starting new work&lt;/li&gt;
  &lt;li&gt;No work may begin before it meets our “definition of ready”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will not happen on day one. The team should be asking daily, “what’s the main reason we cannot do this?” and apply fixes until they can.&lt;/p&gt;

&lt;h3 id=&quot;definition-of-ready&quot;&gt;Definition of Ready&lt;/h3&gt;

&lt;p&gt;For any step, there must be exit criteria to prevent rejection from downstream steps. For refining work, it must be clear enough to prevent questions, guessing about what requirements mean, or gold plating during development.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Acceptance criteria aligned with the value are agreed to and understood by the team and business&lt;/li&gt;
  &lt;li&gt;Dependencies documented and solutions in place to allow delivery without them&lt;/li&gt;
  &lt;li&gt;Any required research / training is complete&lt;/li&gt;
  &lt;li&gt;Interface contract changes documented&lt;/li&gt;
  &lt;li&gt;Component functional tests defined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these policies in place, the team can begin removing other roadblocks.&lt;/p&gt;

&lt;h3 id=&quot;visualize-metrics&quot;&gt;Visualize Metrics&lt;/h3&gt;

&lt;p&gt;Until you know where you are, you cannot chart a path. Metrics are meaningless unless they are always visible. We use Hygieia to monitor CI outcomes, before that, we built Graphana views. No matter what method you choose, current metrics must be kept visible to everyone.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How frequently are pull requests integrating to Master?&lt;/li&gt;
  &lt;li&gt;What’s the average branch age?&lt;/li&gt;
  &lt;li&gt;How long does it take to fix broken builds?&lt;/li&gt;
  &lt;li&gt;How stable is the build?&lt;/li&gt;
  &lt;li&gt;Is the build taking too long?&lt;/li&gt;
  &lt;li&gt;How many tests are running and is that number increasing?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Track them, gamify them, make them better, and understand the goal is continuous improvement. Metrics are indicators, not goals.&lt;/p&gt;

&lt;h2 id=&quot;clear-impediments&quot;&gt;Clear Impediments&lt;/h2&gt;

&lt;p&gt;Now the real work of changing habits begins. Habits change when previous habits no longer deliver value. When there is no pressure to integrate more frequently, re-refining work in progress doesn’t cause much pain. Integrating code once a week or longer with multi-hour code reviews and regular merge conflicts seem normal and acceptable. With our new drive to deliver code to the trunk daily, things must change.&lt;/p&gt;

&lt;h3 id=&quot;improve-refining&quot;&gt;Improve Refining&lt;/h3&gt;

&lt;p&gt;Improperly refined work has cascading impacts on quality outcomes. If work isn’t refined to the level of testable acceptance criteria, then there are too many uncertainties and delivery pressure results in guesswork during development. This impact proper testing since poorly refined work drives developers into a constant “proof of concept” mindset with exploratory coding as the primary flow. It’s very common to see retry loops in a value stream map after development has started where developers are waiting on clarification. This, in turn, incentivizes increased WIP as they pick up new work while they wait and additional delivery delays as they context switch back or just park the original work until he lower priority WIP is completed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Behavior Driven Development&lt;/strong&gt; is an important tool for changing the culture and improving outcomes. BDD focuses on collaborating with all stakeholders to uncover the real business needs. Outcomes are owned by all of the stakeholders, not just the developers. We don’t finger point, we problem solve and focus on improvement. We also learn together that we’d rather fail small.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Simplicity — the art of maximizing the amount of work not done — is essential.”
&lt;small&gt;&lt;a href=&quot;https://agilemanifesto.org/principles.html&quot;&gt;Principles of Agile Development&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;BDD gives us declarative, unambiguous acceptance criteria that can be tested. Now we have feature level functional tests that decompose into component level functional tests easily identifiable contract changes. We have a much higher level of confidence for what the business wants because they helped us define it and own the outcomes. We also know what NOT to develop since anything we develop beyond what we agreed to is a defect.&lt;/p&gt;

&lt;p&gt;With a hard definition of done and clear delivery goals, we can easily swarm the work as a team. Which services will be impacted? Will new services be required? How can we collaborate to deliver those changes as a team?&lt;/p&gt;

&lt;h3 id=&quot;improve-testing-process&quot;&gt;Improve Testing Process&lt;/h3&gt;

&lt;p&gt;CI/CD is a quality process, not build automation. In a previous &lt;a href=&quot;https://medium.com/walmartlabs/5-minute-devops-effective-testing-bd38fab50564&quot;&gt;“5 Minute DevOps”&lt;/a&gt;, I spoke about the layers of tests required to execute CI/CD correctly. To add to that, two quotes from one of my favorite books.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s interesting to note that having automated tests primarily created and maintained either by QA or an outsourced party is not correlated with IT performance. “
“Automated unit and acceptance tests should be run against every commit to version control to give developers fast feedback on their changes. Developers should be able to run all automated tests on their workstations in order to triage and fix defects.”
&lt;small&gt;Excerpts From: Nicole Forsgren PhD, Jez Humble &amp;amp; Gene Kim. “Accelerate.”&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Real&lt;/strong&gt; CI requires that testing primarily happens before code commit. It also means that manual testing and/or handoffs to a “testing team” will break us. We cannot meet our goals that way. Habits must change.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Since the team defined how the feature will work to a testable level during refining, all that’s required is to implement the tests. Instead of struggling to come up with what to test, developers can spend time designing HOW to most efficiently test against the goal. This results in more downstream improvement.&lt;/li&gt;
  &lt;li&gt;Code reviews improve. There is no need to code review for functionality, that’s what tests are for. Code review can focus on readability and verifying that the tests match what was agreed to as a team. The tests validate the new functionality and protect that behavior on every subsequent build. As we reduce the time between merges, changes are smaller and code review is more effective and can be completed in minutes instead of hours.&lt;/li&gt;
  &lt;li&gt;The increased confidence that we can make change without breaking existing features makes development faster. We sleep better at night because we know we can triage and fix things faster at 3:00 am without risking breaking things even more.&lt;/li&gt;
  &lt;li&gt;Test suites are less likely to become spaghetti code because we need our tests to run quickly. Test code is code and requires constant design and refactoring. The need for rapid test results helps this happen. Michael Nygard once told me that he created a test that would fail the test suite if it ran for longer than 15 minutes to force refactoring of the tests. Brilliant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;workflow-management&quot;&gt;Workflow Management&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Individuals don’t win in business, teams do.
&lt;small&gt;Sam Walton&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine a football team where everyone was measured only by how often they scored. Everyone will be focused on getting the ball, scoring, and being a hero instead of helping the teammate who has the ball. The same happens on a development team.&lt;/p&gt;

&lt;p&gt;Have you seen a team where everyone has assigned tasks instead of pulling work or where individuals are measured based on how many tasks they complete? With everyone focused on their task list or making themselves appear to be heroes, they aren’t focused on helping to deliver the next value item. You’ll see this in long wait times on pull requests, cherry-picking low priority, easy to complete work or increased work in progress. They look busy, but value delivery is minimal.&lt;/p&gt;

&lt;p&gt;The teamwork expectations and time box constraints in the CI working agreement along with leadership understanding how to incentivize better outcomes result in lower lead time and increased throughput. The team only looks less busy.&lt;/p&gt;

&lt;h2 id=&quot;only-outcomes-matter&quot;&gt;Only Outcomes Matter&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Working software is the primary measure of progress.
&lt;small&gt;&lt;a href=&quot;https://agilemanifesto.org/principles.html&quot;&gt;Principles of Agile Development&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The customers only care about how quickly they can see value from the next feature. As development leaders, the goal is to help the teams find better ways to deliver value and to align the process in ways that encourage this. CI is an effective way to do this if the correct policies are in place. It provides easily measurable outcomes that allow rapid feedback for any improvement experiment. Because of the level of teamwork required to execute at a high level, it’s also an effective way for a new team to more quickly evolve from “forming” to “performing”. We’ve witnessed this repeatedly.&lt;/p&gt;

&lt;p&gt;One note to this: Teams grow and learn as organisms. Team members are not legos. Adding or removing anyone from a team reduces the team’s effectiveness. Team change should be done carefully and infrequently unless improved outcomes isn’t a goal.&lt;/p&gt;

&lt;h2 id=&quot;excuses&quot;&gt;Excuses&lt;/h2&gt;

&lt;p&gt;Some may assert that CI works quite well using an “integration branch” or GitFlow, that integrating every week or once a sprint is fine, or that only complete work should be integrated, I’ve heard all of those excuses before. I’ve also failed that way. Real CI drives real results. Culture changes because the underlying behaviors change. The reverse is never true. Don’t allow lack of knowledge, lack of testing, or fear prevent improvement.&lt;/p&gt;

&lt;p&gt;Fix the problems.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/itrevolution/5-minute-devops-engineering-culture-change-with-ci-61cd640a5ea3&quot;&gt;This post originally appeared on Medium&lt;/a&gt;. You can see other posts in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5 Minute DevOps&lt;/code&gt; series &lt;a href=&quot;https://medium.com/@bdfinst&quot;&gt;there&lt;/a&gt;&lt;/p&gt;</content><author><name>Bryan Finster</name></author><summary type="html">So, you hired an “Agile Transformation” consulting company to advise executive leadership and you’re “Agile” now. Leadership attended a week-long class on “Agile”, teams took a two day class about Scrum being The Way. The new methodology with story points, daily standup, and sprints now reigns, but outcomes haven’t changed. Next, you talk about the “agile mindset” while Scrum Masters report monthly on how much “velocity” has increased. At the team level, the labels have changed, but the processes are the same. Possibly there is less design, but you don’t design solutions in “Agile”. They just “emerge”, right?</summary></entry><entry><title type="html">Living the Dream with Continuous Improvements</title><link href="http://dojoconsortium.org/index.html/blog/2019-09-10-plipnick-Living_the_Dream_with_Continuous_Improvements.html" rel="alternate" type="text/html" title="Living the Dream with Continuous Improvements" /><published>2019-09-10T00:00:00+00:00</published><updated>2019-09-10T00:00:00+00:00</updated><id>http://dojoconsortium.org/index.html/blog/plipnick-Living_the_Dream_with_Continuous_Improvements</id><content type="html" xml:base="http://dojoconsortium.org/index.html/blog/2019-09-10-plipnick-Living_the_Dream_with_Continuous_Improvements.html">&lt;p&gt;We are creating an innovative environment and a strong corporate culture, and that is living the dream.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;https://technologyandoptimizingprocesses.files.wordpress.com/2019/08/morocco-20-copy-1.jpg&quot; width=&quot;35%&quot; alt=&quot;https://technologyandoptimizingprocesses.com/&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“You don’t have to be a genius or a visionary or even a college graduate to be successful. You just need a framework and a dream.”
– Michael Dell&lt;/p&gt;

&lt;p&gt;The Society for Human Resource Management’s 2017 Employee Job Satisfaction Survey stated that only 41% of respondents were extremely satisfied with the work itself. Unfortunately, this is not living the dream. If people are going into the office everyday feeling uninspired about their work, then this is an opportunity for innovation. The great news is that we can create a better work environment for everyone. It starts with creating a continuous improvement culture, and this empowers teams to optimize their processes. What does optimizing processes include? It includes many things, but some of the activities are streamlining, eliminating, and automating processes. If we reduce the time that our teams spend on manual work, then they have time to work on innovative ideas that can often drive revenue. Innovation increases the company’s bottom line, so the organization wins. Also, this work is typically more exciting, so our colleagues win. It creates happier teams, and the company creates a solid competitive advantage due to the increased long term business value.&lt;/p&gt;

&lt;p&gt;Creating a continuous improvement culture starts with a mind shift change, so everyone starts thinking about the ways they want to improve processes. Also, it helps to have a strategy, so the teams know how to get started with their first continuous improvement project. In addition, it is a good idea to have someone coaching the team that has had previous experience in the continuous improvement space.&lt;/p&gt;

&lt;p&gt;There are 3 high level components to a continuous improvement project:&lt;/p&gt;

&lt;p&gt;-A goal 
-A framework
-Metrics that will help you measure your success&lt;/p&gt;

&lt;p&gt;First, the goal defines the dream. It answers the question of why we are doing the project. An expected outcome could be to reduce the time or cost of a process. Also, you may want to increase the quality or employee satisfaction that occurs while completing the process. A bonus would be to create value for all 4 areas. Also, a good practice is to define the goal in business terms, because it  helps everyone understand what we want to do. For example, I want to take “Process A” from 10 days to 5 days for an estimated 50% cost reduction.&lt;/p&gt;

&lt;p&gt;Next, using the correct framework will make the process innovation a success. Value stream mapping and A3 are 2 common frameworks, and they break down the steps of the process improvement project. The value stream mapping framework creates a visual representation of the steps of the process, and it helps to identify the issues. Similarly, the A3 framework captures the steps of the process, so the team is able to find any challenges. Next, the team analyzes the root cause of the issues, so they can be resolved.&lt;/p&gt;

&lt;p&gt;Third, collecting the metrics will help the teams make data driven decisions, and it will help them report their business value creation. The current state of the process will create the baseline metrics for time, cost, quality, and employee satisfaction. After the baseline data is collected, then the teams will want to collect the data for the future state of the process. This will let them measure the impact they are creating by executing the continuous improvement work. If the measured impact is low, then they may need to determine a new method for achieving their goals. Also, they could decide to classify the work at a lower priority, so they are able to expedite the execution of more impactful work. On the other hand, if the work has a high impact, then they will classify it at a high priority. After the process innovations have been executed, then the team will collect the new data to report the actual business value creation.&lt;/p&gt;

&lt;p&gt;In conclusion, we spend a large amount of time working, and we take pride in being top performers. A week has 168 hours total, so working 50 hours is almost 1/3 of the total time available. There are many opportunities to optimize our time at work with a continuous improvement projects. The starting point for a continuous improvement project is having a goal, a framework, and metrics to make data driven decisions and measure success. We will be creating more business value with the available time, and this increases job satisfaction. It will lead to things like increased morale, reduced turnover, and it will help with recruiting top talent. Most importantly, we are creating an innovative environment and a strong corporate culture, and that is living the dream.&lt;/p&gt;

&lt;p&gt;This post orginally appeared on https://technologyandoptimizingprocesses.com.&lt;/p&gt;</content><author><name>Paula Lipnick</name></author><summary type="html">We are creating an innovative environment and a strong corporate culture, and that is living the dream.</summary></entry><entry><title type="html">5 Minute DevOps - GitFlow Best Practices</title><link href="http://dojoconsortium.org/index.html/blog/2019-09-07-bfinster.html" rel="alternate" type="text/html" title="5 Minute DevOps - GitFlow Best Practices" /><published>2019-09-07T00:00:00+00:00</published><updated>2019-09-07T00:00:00+00:00</updated><id>http://dojoconsortium.org/index.html/blog/bfinster</id><content type="html" xml:base="http://dojoconsortium.org/index.html/blog/2019-09-07-bfinster.html">&lt;p&gt;I was asked recently about the best practice for using GitFlow with continuous integration. For those who do not know, this is GitFlow:&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/posts/giflow.png&quot; width=&quot;35%&quot; alt=&quot;Post from 2010: https://nvie.com/posts/a-successful-git-branching-model/&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no CI good practice that includes GitFlow. For continuous integration to meet the definition, these are the good practices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Developers must implement &lt;strong&gt;all&lt;/strong&gt; tests before they commit code. This is a non-negotiable and I will not work with developers who refuse to test. Professionals deliver working, tested code. Script kiddies don’t test.&lt;/li&gt;
  &lt;li&gt;Use CI automation to trigger builds for every pull request so that bad changes can be rejected before code review.&lt;/li&gt;
  &lt;li&gt;Ensure that all tests are executed and linting and static code analysis is done for every PR.&lt;/li&gt;
  &lt;li&gt;Implement CI practices:
    &lt;ul&gt;
      &lt;li&gt;All developers branch from the trunk, make changes, and submit PRs back to trunk.&lt;/li&gt;
      &lt;li&gt;The branches are removed in less than 24 hours.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re now doing Trunk Based Development. Welcome to your CI/CD journey!&lt;/p&gt;

&lt;p&gt;The complexity of the CI automation will depend on how poorly the application is architected and the size of the development team. Monoliths with poor sub-domain boundaries will require much more complicated test design and test execution will take much longer. Evolve The architecture into independent, loosely coupled sub-domains to improve delivery speed, reduce testing overhead, and improve stability, resilience, and scalability.&lt;/p&gt;

&lt;p&gt;GitFlow does not increase quality or value delivery. It delays quality signal feedback to the developers, incentivizes manual process, and is incredibly wasteful of time and resources. No modern development uses it.&lt;/p&gt;

&lt;p&gt;Some developers have a religion built around GitFlow because it reduces typing (reduced pain from not testing) and they don’t track their levels of re-work, lost changes, or conflict resolution. In 2010, GitFlow felt good. We could keep Master “clean”. That was almost a decade ago. Testing was still mostly manual. We were still on Java 6. NodeJS was barely a thing. Time to modernize. We don’t keep Master clean with process. We keep it clean with automation.&lt;/p&gt;

&lt;p&gt;Other examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itrevolution.com/the-amazing-devops-transformation-of-the-hp-laserjet-firmware-team-gary-gruver/&quot;&gt;The Amazing DevOps Transformation Of The HP LaserJet Firmware Team&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://continuousdelivery.com/&quot;&gt;What is Continuous Delivery?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post orginally appeared on Medium. You can see other posts in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5 Minute DevOps&lt;/code&gt; series &lt;a href=&quot;https://medium.com/@bdfinst&quot;&gt;there&lt;/a&gt;&lt;/p&gt;</content><author><name>Bryan Finster</name></author><summary type="html">I was asked recently about the best practice for using GitFlow with continuous integration. For those who do not know, this is GitFlow:</summary></entry><entry><title type="html">Great change happens through small steps. A lot of them.</title><link href="http://dojoconsortium.org/index.html/blog/2019-09-07-cgallivan.html" rel="alternate" type="text/html" title="Great change happens through small steps. A lot of them." /><published>2019-09-07T00:00:00+00:00</published><updated>2019-09-07T00:00:00+00:00</updated><id>http://dojoconsortium.org/index.html/blog/cgallivan</id><content type="html" xml:base="http://dojoconsortium.org/index.html/blog/2019-09-07-cgallivan.html">&lt;p&gt;The DevOps community provides sage advice to focus on outcomes. Outcomes in this context serve as the “North Star” to guide our improvement journey.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/posts/6D524680-10E0-4BB5-ACE5-558A6C96E06B.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For some of us focusing on outcomes can be daunting, especially when that outcome is so far away. If we are not careful, we can get lost in the minutia; stuck in the starters block.
How do we get out of the starters block? I always tell my teams to make each day a little bit better than the day before. Make a small, simple improvement every day.&lt;/p&gt;

&lt;p&gt;Remember every successful journey starts with a single step…and ends with tired legs.&lt;/p&gt;

&lt;p&gt;This post originally appeared on Instagram. You can see other posts @the.devops.hive &lt;a href=&quot;https://www.instagram.com/the.devops.hive/&quot;&gt;there&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris Gallivan</name></author><summary type="html">The DevOps community provides sage advice to focus on outcomes. Outcomes in this context serve as the “North Star” to guide our improvement journey.</summary></entry></feed>